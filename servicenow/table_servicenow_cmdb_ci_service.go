package servicenow

import (
	"github.com/turbot/steampipe-plugin-sdk/v5/grpc/proto"
	"github.com/turbot/steampipe-plugin-sdk/v5/plugin"
	"github.com/turbot/steampipe-plugin-sdk/v5/plugin/transform"
)

const CmdbCIServiceTableName = "cmdb_ci_service"

//// TABLE DEFINITION

func tableServicenowCmdbCiService() *plugin.Table {
	return &plugin.Table{
		Name:             "servicenow_cmdb_ci_service",
		DefaultTransform: transform.FromCamel(),
		Description:      "Tracks service-related information in the CMDB.",
		List: &plugin.ListConfig{
			KeyColumns: plugin.OptionalColumns([]string{"aliases", "asset_tag", "attestation_status", "attributes", "busines_criticality", "business_need", "category", "checkout", "comments", "compatibility_dependencies", "consumer_type", "correlation_id", "cost_cc", "discovery_source", "dns_domain", "due_in", "environment", "fqdn", "gl_account", "invoice_number", "ip_address", "justification", "lease_id", "mac_address", "model_number", "monitoring_requirements", "name", "number", "po_number", "portfolio_status", "prerequisites", "price_model", "price_unit", "purchase_date", "serial_number", "service_classification", "service_level_requirement", "service_status", "short_description", "stakeholders", "state", "subcategory", "sys_class_name", "sys_class_path", "sys_created_by", "sys_domain_path", "sys_id", "sys_updated_by", "unit_description", "used_for", "version", "warranty_expiration"}),
			Hydrate:    listServicenowObjectsByTable(CmdbCIServiceTableName, nil),
		},
		Get: &plugin.GetConfig{
			Hydrate:    getServicenowObjectbyID(CmdbCIServiceTableName),
			KeyColumns: plugin.SingleColumn("sys_id"),
		},
		Columns: []*plugin.Column{
			{Name: "aliases", Description: "Alternative names or aliases for the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "aliases")},
			{Name: "asset_tag", Description: "Tag or label associated with the asset.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "asset_tag")},
			{Name: "asset", Description: "Asset associated with the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "asset")},
			{Name: "assigned_to", Description: "User or group assigned to the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "assigned_to")},
			{Name: "assigned", Description: "Flag indicating if the service is assigned.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "assigned").Transform(parseDateTime)},
			{Name: "assignment_group", Description: "Group responsible for the assignment of the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "assignment_group")},
			{Name: "attestation_score", Description: "Score indicating the level of attestation for the service.", Type: proto.ColumnType_INT, Transform: transform.FromP(getFieldFromSObjectMap, "attestation_score")},
			{Name: "attestation_status", Description: "Status of attestation for the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "attestation_status")},
			{Name: "attested_by", Description: "User who attested the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "attested_by")},
			{Name: "attested_date", Description: "Date when the service was attested.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "attested_date").Transform(parseDateTime)},
			{Name: "attested", Description: "Flag indicating if the service is attested.", Type: proto.ColumnType_BOOL, Transform: transform.FromP(getFieldFromSObjectMap, "attested")},
			{Name: "attributes", Description: "Additional attributes or properties of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "attributes")},
			{Name: "busines_criticality", Description: "Criticality level or importance of the service to the business.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "busines_criticality")},
			{Name: "business_contact", Description: "Contact person or group for business-related matters.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "business_contact")},
			{Name: "business_need", Description: "Business need or purpose for the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "business_need")},
			{Name: "business_relation_manager", Description: "Manager responsible for the business relationship with the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "business_relation_manager")},
			{Name: "business_unit", Description: "Business unit associated with the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "business_unit")},
			{Name: "can_print", Description: "Flag indicating if the service can be printed.", Type: proto.ColumnType_BOOL, Transform: transform.FromP(getFieldFromSObjectMap, "can_print")},
			{Name: "category", Description: "Category or classification of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "category")},
			{Name: "change_control", Description: "Change control process or requirements for the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "change_control")},
			{Name: "checked_in", Description: "Flag indicating if the service is checked in.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "checked_in").Transform(parseDateTime)},
			{Name: "checked_out", Description: "Flag indicating if the service is checked out.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "checked_out").Transform(parseDateTime)},
			{Name: "checkout", Description: "Checkout status or details of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "checkout")},
			{Name: "comments", Description: "Additional comments or notes about the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "comments")},
			{Name: "company", Description: "Company associated with the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "company")},
			{Name: "compatibility_dependencies", Description: "Dependencies or requirements for compatibility with other services.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "compatibility_dependencies")},
			{Name: "consumer_type", Description: "Type of consumer or user of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "consumer_type")},
			{Name: "correlation_id", Description: "ID for correlating related services or records.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "correlation_id")},
			{Name: "cost_cc", Description: "Cost center associated with the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "cost_cc")},
			{Name: "cost_center", Description: "Cost center associated with the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "cost_center")},
			{Name: "cost", Description: "Cost or financial details of the service.", Type: proto.ColumnType_DOUBLE, Transform: transform.FromP(getFieldFromSObjectMap, "cost")},
			{Name: "delivery_date", Description: "Date when the service is expected to be delivered.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "delivery_date").Transform(parseDateTime)},
			{Name: "delivery_manager", Description: "Manager responsible for the delivery of the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "delivery_manager")},
			{Name: "department", Description: "Department associated with the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "department")},
			{Name: "discovery_source", Description: "Source or method of service discovery.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "discovery_source")},
			{Name: "dns_domain", Description: "DNS domain associated with the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "dns_domain")},
			{Name: "due_in", Description: "Time or duration until the service is due.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "due_in")},
			{Name: "due", Description: "Due date or deadline for the service.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "due").Transform(parseDateTime)},
			{Name: "duplicate_of", Description: "Reference to a duplicate service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "duplicate_of")},
			{Name: "end_date", Description: "Date when the service ends or expires.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "end_date").Transform(parseDateTime)},
			{Name: "environment", Description: "Environment or context in which the service operates.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "environment")},
			{Name: "fault_count", Description: "Number of faults or issues associated with the service.", Type: proto.ColumnType_INT, Transform: transform.FromP(getFieldFromSObjectMap, "fault_count")},
			{Name: "first_discovered", Description: "Date when the service was first discovered.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "first_discovered").Transform(parseDateTime)},
			{Name: "fqdn", Description: "Fully qualified domain name (FQDN) associated with the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "fqdn")},
			{Name: "gl_account", Description: "General ledger (GL) account associated with the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "gl_account")},
			{Name: "install_date", Description: "Date when the service was installed.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "install_date").Transform(parseDateTime)},
			{Name: "install_status", Description: "Status or details of the installation of the service.", Type: proto.ColumnType_INT, Transform: transform.FromP(getFieldFromSObjectMap, "install_status")},
			{Name: "invoice_number", Description: "Number of the invoice related to the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "invoice_number")},
			{Name: "ip_address", Description: "IP address associated with the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "ip_address")},
			{Name: "justification", Description: "Reason or justification for the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "justification")},
			{Name: "last_discovered", Description: "Date when the service was last discovered.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "last_discovered").Transform(parseDateTime)},
			{Name: "last_review_date", Description: "Date of the last review or assessment of the service.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "last_review_date").Transform(parseDateTime)},
			{Name: "lease_id", Description: "ID of the lease associated with the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "lease_id")},
			{Name: "life_cycle_stage_status", Description: "Status of the life cycle stage of the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "life_cycle_stage_status")},
			{Name: "life_cycle_stage", Description: "Stage or phase in the life cycle of the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "life_cycle_stage")},
			{Name: "location", Description: "Location or physical placement of the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "location")},
			{Name: "mac_address", Description: "MAC address associated with the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "mac_address")},
			{Name: "maintenance_schedule", Description: "Schedule or plan for maintenance activities of the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "maintenance_schedule")},
			{Name: "managed_by_group", Description: "Group responsible for managing the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "managed_by_group")},
			{Name: "managed_by", Description: "User or group responsible for managing the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "managed_by")},
			{Name: "manufacturer", Description: "Manufacturer or creator of the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "manufacturer")},
			{Name: "model_id", Description: "ID or reference to the model associated with the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "model_id")},
			{Name: "model_number", Description: "Model number or identifier of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "model_number")},
			{Name: "monitor", Description: "Flag indicating if the service is monitored.", Type: proto.ColumnType_BOOL, Transform: transform.FromP(getFieldFromSObjectMap, "monitor")},
			{Name: "monitoring_requirements", Description: "Requirements or specifications for monitoring the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "monitoring_requirements")},
			{Name: "name", Description: "Name or title of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "name")},
			{Name: "number", Description: "Unique number or identifier of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "number")},
			{Name: "operational_status", Description: "Current operational status of the service.", Type: proto.ColumnType_INT, Transform: transform.FromP(getFieldFromSObjectMap, "operational_status")},
			{Name: "order_date", Description: "Date when the service was ordered or requested.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "order_date").Transform(parseDateTime)},
			{Name: "owned_by", Description: "User or group who owns or is responsible for the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "owned_by")},
			{Name: "parent", Description: "Parent service associated with the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "parent")},
			{Name: "po_number", Description: "Purchase order number related to the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "po_number")},
			{Name: "portfolio_status", Description: "Status or categorization of the service within a portfolio.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "portfolio_status")},
			{Name: "prerequisites", Description: "Pre-requisites or requirements for the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "prerequisites")},
			{Name: "price_model", Description: "Pricing model or strategy for the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "price_model")},
			{Name: "price_unit", Description: "Unit of measurement or currency for the price of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "price_unit")},
			{Name: "published_ref", Description: "Reference or link to published information about the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "published_ref")},
			{Name: "purchase_date", Description: "Date when the service was purchased.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "purchase_date")},
			{Name: "schedule", Description: "Schedule or timeline associated with the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "schedule")},
			{Name: "serial_number", Description: "Serial number or unique identifier of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "serial_number")},
			{Name: "service_classification", Description: "Classification or categorization of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "service_classification")},
			{Name: "service_level_requirement", Description: "Service level requirement or agreement for the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "service_level_requirement")},
			{Name: "service_owner_delegate", Description: "Delegate or representative of the service owner.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "service_owner_delegate")},
			{Name: "service_status", Description: "Current status or state of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "service_status")},
			{Name: "short_description", Description: "Brief description or summary of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "short_description")},
			{Name: "skip_sync", Description: "Flag indicating if synchronization should be skipped for the service.", Type: proto.ColumnType_BOOL, Transform: transform.FromP(getFieldFromSObjectMap, "skip_sync")},
			{Name: "sla", Description: "Service Level Agreement (SLA) associated with the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "sla")},
			{Name: "spm_service_portfolio", Description: "Service Portfolio Management (SPM) portfolio associated with the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "spm_service_portfolio")},
			{Name: "spm_taxonomy_node", Description: "Taxonomy node associated with the service in SPM.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "spm_taxonomy_node")},
			{Name: "stakeholders", Description: "Individuals or groups with an interest in the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "stakeholders")},
			{Name: "start_date", Description: "Date when the service starts or becomes active.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "start_date").Transform(parseDateTime)},
			{Name: "state", Description: "Current state or status of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "state")},
			{Name: "subcategory", Description: "Subcategory or sub-classification of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "subcategory")},
			{Name: "support_group", Description: "Group responsible for providing support for the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "support_group")},
			{Name: "supported_by", Description: "User or group responsible for supporting the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "supported_by")},
			{Name: "sys_class_name", Description: "Name of the service's system class.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "sys_class_name")},
			{Name: "sys_class_path", Description: "Path or hierarchy of the service's system class.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "sys_class_path")},
			{Name: "sys_created_by", Description: "User who created the service record.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "sys_created_by")},
			{Name: "sys_created_on", Description: "Date and time when the service record was created.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "sys_created_on").Transform(parseDateTime)},
			{Name: "sys_domain_path", Description: "Path or hierarchy of the service's system domain.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "sys_domain_path")},
			{Name: "sys_domain", Description: "Domain associated with the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "sys_domain")},
			{Name: "sys_id", Description: "Unique identifier of the service record.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "sys_id")},
			{Name: "sys_mod_count", Description: "Number of times the service record has been modified.", Type: proto.ColumnType_INT, Transform: transform.FromP(getFieldFromSObjectMap, "sys_mod_count")},
			{Name: "sys_updated_by", Description: "User who last updated the service record.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "sys_updated_by")},
			{Name: "sys_updated_on", Description: "Date and time when the service record was last updated.", Type: proto.ColumnType_TIMESTAMP, Transform: transform.FromP(getFieldFromSObjectMap, "sys_updated_on").Transform(parseDateTime)},
			{Name: "unit_description", Description: "Description or details of the service unit.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "unit_description")},
			{Name: "unverified", Description: "Flag indicating if the service is unverified or not confirmed.", Type: proto.ColumnType_BOOL, Transform: transform.FromP(getFieldFromSObjectMap, "unverified")},
			{Name: "used_for", Description: "Purpose or use of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "used_for")},
			{Name: "user_group", Description: "User group associated with the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "user_group")},
			{Name: "vendor", Description: "Vendor or supplier of the service.", Type: proto.ColumnType_JSON, Transform: transform.FromP(getFieldFromSObjectMap, "vendor")},
			{Name: "version", Description: "Version or release of the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "version")},
			{Name: "warranty_expiration", Description: "Expiration date of the warranty for the service.", Type: proto.ColumnType_STRING, Transform: transform.FromP(getFieldFromSObjectMap, "warranty_expiration")},
		},
	}
}
